
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND CLASS DISJOINTCLASSES EQUIVALENTTO IDENTIFIER INDIVIDUALS NUMBER ONLY OR SOME STRING SUBCLASSOF VALUEontology : classesclasses : classes class_definition\n              | class_definitionclass_definition : CLASS IDENTIFIER class_bodyclass_body : subclassof disjointclasses individuals\n                 | subclassof disjointclasses\n                 | subclassof individuals\n                 | subclassofsubclassof : SUBCLASSOF propertiesdisjointclasses : DISJOINTCLASSES IDENTIFIERLISTindividuals : INDIVIDUALS IDENTIFIERLISTproperties : properties property\n                 | propertyproperty : IDENTIFIER SOME IDENTIFIER\n               | IDENTIFIER SOME IDENTIFIER '[' NUMBER ']'IDENTIFIERLIST : IDENTIFIER ',' IDENTIFIERLIST\n                     | IDENTIFIER"
    
_lr_action_items = {'CLASS':([0,2,3,5,7,8,10,11,14,15,17,18,19,20,21,24,25,28,],[4,4,-3,-2,-4,-8,-6,-7,-9,-13,-5,-10,-17,-11,-12,-14,-16,-15,]),'$end':([1,2,3,5,7,8,10,11,14,15,17,18,19,20,21,24,25,28,],[0,-1,-3,-2,-4,-8,-6,-7,-9,-13,-5,-10,-17,-11,-12,-14,-16,-15,]),'IDENTIFIER':([4,9,12,13,14,15,21,22,23,24,28,],[6,16,19,19,16,-13,-12,24,19,-14,-15,]),'SUBCLASSOF':([6,],[9,]),'DISJOINTCLASSES':([8,14,15,21,24,28,],[12,-9,-13,-12,-14,-15,]),'INDIVIDUALS':([8,10,14,15,18,19,21,24,25,28,],[13,13,-9,-13,-10,-17,-12,-14,-16,-15,]),'SOME':([16,],[22,]),',':([19,],[23,]),'[':([24,],[26,]),'NUMBER':([26,],[27,]),']':([27,],[28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ontology':([0,],[1,]),'classes':([0,],[2,]),'class_definition':([0,2,],[3,5,]),'class_body':([6,],[7,]),'subclassof':([6,],[8,]),'disjointclasses':([8,],[10,]),'individuals':([8,10,],[11,17,]),'properties':([9,],[14,]),'property':([9,14,],[15,21,]),'IDENTIFIERLIST':([12,13,23,],[18,20,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ontology","S'",1,None,None,None),
  ('ontology -> classes','ontology',1,'p_ontology','main.py',55),
  ('classes -> classes class_definition','classes',2,'p_classes','main.py',61),
  ('classes -> class_definition','classes',1,'p_classes','main.py',62),
  ('class_definition -> CLASS IDENTIFIER class_body','class_definition',3,'p_class_definition','main.py',68),
  ('class_body -> subclassof disjointclasses individuals','class_body',3,'p_class_body','main.py',76),
  ('class_body -> subclassof disjointclasses','class_body',2,'p_class_body','main.py',77),
  ('class_body -> subclassof individuals','class_body',2,'p_class_body','main.py',78),
  ('class_body -> subclassof','class_body',1,'p_class_body','main.py',79),
  ('subclassof -> SUBCLASSOF properties','subclassof',2,'p_subclassof','main.py',84),
  ('disjointclasses -> DISJOINTCLASSES IDENTIFIERLIST','disjointclasses',2,'p_disjointclasses','main.py',88),
  ('individuals -> INDIVIDUALS IDENTIFIERLIST','individuals',2,'p_individuals','main.py',92),
  ('properties -> properties property','properties',2,'p_properties','main.py',96),
  ('properties -> property','properties',1,'p_properties','main.py',97),
  ('property -> IDENTIFIER SOME IDENTIFIER','property',3,'p_property','main.py',103),
  ('property -> IDENTIFIER SOME IDENTIFIER [ NUMBER ]','property',6,'p_property','main.py',104),
  ('IDENTIFIERLIST -> IDENTIFIER , IDENTIFIERLIST','IDENTIFIERLIST',3,'p_identifierlist','main.py',110),
  ('IDENTIFIERLIST -> IDENTIFIER','IDENTIFIERLIST',1,'p_identifierlist','main.py',111),
]
